#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

container_name=$2

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'containers_supervisors' "${container_name}"
export CONTAINER_PID_FILE=${CONTAINERS_PID_DIR}/${container_name}.pid

case $1 in

  start)
    pid_guard ${CONTAINER_PID_FILE} ${JOB_NAME}
    echo $$ > ${CONTAINER_PID_FILE}

    # Stop and remove previously Docker Container if exists
    ${DOCKER_COMMAND} stop ${container_name} || true
    ${DOCKER_COMMAND} rm ${container_name} || true

    # Create Container persistent disk path
    if [ ! -d ${CONTAINERS_STORE_DIR}/${container_name} ]; then
      mkdir -p ${CONTAINERS_STORE_DIR}/${container_name}
      chmod 777 ${CONTAINERS_STORE_DIR}/${container_name}
     fi


    # Build the Docker image from Dockerfile
    if [ -a "${CONTAINERS_CONF_DIR}/${container_name}/Dockerfile" ]; then
        chmod 777 ${CONTAINERS_CONF_DIR}/${container_name}/*
    	#Loading alcatraz properties into the zookeeper instance
        zkaddr1=`grep "zookeeper.host" ${CONTAINERS_CONF_DIR}/${container_name}/zookeeper.cfg | cut -d "=" -f2 | cut -d "," -f1 | cut -d ":" -f1`
        zkaddr2=`grep "zookeeper.host" ${CONTAINERS_CONF_DIR}/${container_name}/zookeeper.cfg | cut -d "=" -f2 | cut -d "," -f2 | cut -d ":" -f1`
        zkaddr3=`grep "zookeeper.host" ${CONTAINERS_CONF_DIR}/${container_name}/zookeeper.cfg | cut -d "=" -f2 | cut -d "," -f3| cut -d ":" -f1`

	hzaddr1=`grep "hazel.host" ${CONTAINERS_CONF_DIR}/${container_name}/hazel.cfg | cut -d "=" -f2 | cut -d "," -f1`
        hzaddr2=`grep "hazel.host" ${CONTAINERS_CONF_DIR}/${container_name}/hazel.cfg | cut -d "=" -f2 | cut -d "," -f2`
        hzaddr3=`grep "hazel.host" ${CONTAINERS_CONF_DIR}/${container_name}/hazel.cfg | cut -d "=" -f2 | cut -d "," -f3`


	stormaddr1=`grep "storm.host" ${CONTAINERS_CONF_DIR}/${container_name}/storm.cfg | cut -d "=" -f2 | cut -d "," -f1`
	stormaddr2=`grep "storm.host" ${CONTAINERS_CONF_DIR}/${container_name}/storm.cfg | cut -d "=" -f2 | cut -d "," -f2`

	sed -i "s/zk1/$zkaddr1/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml 
        sed -i "s/zk2/$zkaddr2/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml
        sed -i "s/zk3/$zkaddr3/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml



        sed -i "s/hazel1/$hzaddr1/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml
        sed -i "s/hazel2/$hzaddr2/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml
        sed -i "s/hazel3/$hzaddr3/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml



#        sed -i "s/storm1/$stormaddr1/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml
#        sed -i "s/storm2/$stormaddr2/g" ${CONTAINERS_CONF_DIR}/${container_name}/storm.yaml


        image=$(${DOCKER_COMMAND} images | grep "$(eval echo "\$${container_name}_image")") || true

        if [ -z "${image}" ]; then
            ${DOCKER_COMMAND} \
                build -t "$(eval echo "\$${container_name}_image")" ${CONTAINERS_CONF_DIR}/${container_name} \
                >>${LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
                2>>${LOG_DIR}/${OUTPUT_LABEL}.stderr.log
        fi
    else 
	echo "nothing found at ${CONTAINERS_CONF_DIR}/${container_name}/Dockerfile path" >>${LOG_DIR}/shantaram.stdout.log    	
    fi

    # Start Docker container
    docker_options="run --hostname storm_nimbus --add-host storm_nimbus:$stormaddr1 --network host --detach \
      --name ${container_name} \
      "$(eval echo "\$${container_name}_blkio_weight")" \
      "$(eval echo "\$${container_name}_cap_adds")" \
      "$(eval echo "\$${container_name}_cap_drops")" \
      "$(eval echo "\$${container_name}_cpu_period")" \
      "$(eval echo "\$${container_name}_cpu_quota")" \
      "$(eval echo "\$${container_name}_cpu_shares")" \
      "$(eval echo "\$${container_name}_devices")" \
      "$(eval echo "\$${container_name}_disable_content_trust")" \
      "$(eval echo "\$${container_name}_dns")" \
      "$(eval echo "\$${container_name}_dns_options")" \
      "$(eval echo "\$${container_name}_dns_search")" \
      "$(eval echo "\$${container_name}_entrypoint")" \
      "$(eval echo "\$${container_name}_env_file")" \
      "$(eval echo "\$${container_name}_env")" \
      "$(eval echo "\$${container_name}_expose")" \
      "$(eval echo "\$${container_name}_group_adds")" \
      "$(eval echo "\$${container_name}_hostname")" \
      "$(eval echo "\$${container_name}_kernel_memory")" \
      "$(eval echo "\$${container_name}_labels")" \
      "$(eval echo "\$${container_name}_links")" \
      "$(eval echo "\$${container_name}_log_driver")" \
      "$(eval echo "\$${container_name}_log_options")" \
      "$(eval echo "\$${container_name}_lxc_options")" \
      "$(eval echo "\$${container_name}_mac_address")" \
      "$(eval echo "\$${container_name}_memory")" \
      "$(eval echo "\$${container_name}_memory_reservation")" \
      "$(eval echo "\$${container_name}_memory_swap")" \
      "$(eval echo "\$${container_name}_memory_swappiness")" \
      "$(eval echo "\$${container_name}_net")" \
      "$(eval echo "\$${container_name}_oom_kill_disable")" \
      "$(eval echo "\$${container_name}_privileged")" \
      "$(eval echo "\$${container_name}_publish")" \
      "$(eval echo "\$${container_name}_read_only")" \
      "$(eval echo "\$${container_name}_restart")" \
      "$(eval echo "\$${container_name}_security_options")" \
      "$(eval echo "\$${container_name}_stop_signal")" \
      "$(eval echo "\$${container_name}_ulimits")" \
      "$(eval echo "\$${container_name}_user")" \
      "$(eval echo "\$${container_name}_volumes")" \
      "$(eval echo "\$${container_name}_bind_volumes")" \
      "$(eval echo "\$${container_name}_volumes_from")" \
      "$(eval echo "\$${container_name}_volume_driver")" \
      "$(eval echo "\$${container_name}_workdir")" \
      "$(eval echo "\$${container_name}_image")" \
      "$(eval echo "\$${container_name}_command")" \
    "
    echo "$(date) Running Docker command with options: ${docker_options}"
    ${DOCKER_COMMAND}  ${docker_options} \
        >>${LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${LOG_DIR}/${OUTPUT_LABEL}.stderr.log

    # Grab Container process pid
    pid_process=$(${DOCKER_COMMAND} inspect -f '{{ .State.Pid }}' ${container_name})
    echo $pid_process > ${CONTAINER_PID_FILE}
    ;;

  stop)
    # Stop and remove Docker Container
    ${DOCKER_COMMAND} stop ${container_name} || true
    ${DOCKER_COMMAND} rm ${container_name} || true
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
